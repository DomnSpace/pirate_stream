# radio_gui.py â€“ desktop helper to spin up a local Icecastâ€¯+â€¯Liquidsoap stream
# -----------------------------------------------------------------------------
# â€¢ Mounts your selected music folder directly into the Liquidsoap container
#   (no symlink/copy â†’ no Windows fileâ€‘lock errors)
# â€¢ Autoâ€‘selects a free port, streams shuffled playlist, shows embedded art
# -----------------------------------------------------------------------------
# Prerequisites:
#   python -m pip install pillow mutagen requests
#   Docker Desktop running
# -----------------------------------------------------------------------------

from __future__ import annotations

import io, socket, subprocess, sys, tempfile
from pathlib import Path
import tkinter as tk
from tkinter import filedialog, messagebox

import requests
from PIL import Image, ImageTk
from mutagen.id3 import ID3, APIC

APP_TITLE   = "Pirate Radio â€“ Local Stream"
DEFAULT_PORT = 8000
MOUNT        = "/stream"

# â”€â”€ helpers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

def find_free_port(start: int = DEFAULT_PORT) -> int:
    port = start
    while port < 65535:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            try:
                s.bind(("127.0.0.1", port))
                return port
            except OSError:
                port += 1
    raise RuntimeError("No free port found")


def docker_used_ports() -> set[int]:
    out = subprocess.run([
        "docker", "ps", "--format", "{{.Ports}}"], text=True,
        capture_output=True).stdout.splitlines()
    ports: set[int] = set()
    for entry in out:
        for part in entry.split(","):
            if "->" in part:
                host = part.split("->")[0]
                if ":" in host:
                    ports.add(int(host.split(":")[1]))
    return ports

# â”€â”€ templates â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ICECAST_XML = """<icecast>
  <authentication>
    <source-password>{pw}</source-password>
    <admin-user>admin</admin-user>
    <admin-password>hackme-admin</admin-password>
  </authentication>
  <listen-socket><port>{port}</port></listen-socket>
  <hostname>localhost</hostname>
  <mount><mount-name>{mount}</mount-name></mount>
  <http-headers>
    <header name="Access-Control-Allow-Origin" value="*" />
    <header name="Access-Control-Allow-Headers" value="Origin, Accept, X-Requested-With, Content-Type" />
    <header name="Access-Control-Allow-Methods" value="GET, OPTIONS" />
  </http-headers>
</icecast>"""

LIQUIDSOAP_LIQ = (
    "# generated by radio_gui.py\n"
    "radio = playlist(mode='random', '/music')\n"
    "output.icecast(%mp3(bitrate=128), radio, host='icecast', port={port}, "
    "password='{pw}', mount='{mount}', name='Pirate Radio')\n"
)

COMPOSE_YML = """services:
  icecast:
    image: moul/icecast:latest
    container_name: {prefix}_icecast
    ports: [\"{port}:{port}\"]
    volumes:
      - ./icecast.xml:/etc/icecast.xml:ro

  liquidsoap:
    image: savonet/liquidsoap:v2.3.3-minimal
    container_name: {prefix}_liquidsoap
    depends_on: [icecast]
    volumes:
      - {musicvol}:/music:ro
      - ./radio.liq:/config/radio.liq:ro
    command: [\"liquidsoap\", \"/config/radio.liq\"]
"""

# â”€â”€ GUI â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

class RadioGUI(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title(APP_TITLE)
        self.resizable(False, False)

        self.port = find_free_port()
        self.music_dir: Path | None = None
        self.covers: dict[str, ImageTk.PhotoImage] = {}

        self.workdir = Path(tempfile.gettempdir()) / "pirate_radio"
        self.workdir.mkdir(exist_ok=True)

        # UI
        tk.Label(self, text="Music folder:").grid(row=0, column=0, sticky='e', padx=8, pady=6)
        self.dir_var = tk.StringVar()
        tk.Entry(self, textvariable=self.dir_var, width=46, state='readonly').grid(row=0, column=1)
        tk.Button(self, text="Browseâ€¦", command=self.browse).grid(row=0, column=2, padx=5)

        self.cover_lbl = tk.Label(self, width=220, height=220, bg="#111"); self.cover_lbl.grid(row=1, column=0, columnspan=3, pady=10)
        self.blank_img = ImageTk.PhotoImage(Image.new('RGB', (220,220), '#222')); self.cover_lbl.configure(image=self.blank_img)

        tk.Label(self, text="Port:").grid(row=2, column=0, sticky='e')
        self.port_var = tk.IntVar(value=self.port)
        tk.Spinbox(self, from_=1025, to=65535, width=6, textvariable=self.port_var).grid(row=2, column=1, sticky='w')

        self.start_btn = tk.Button(self, text="Start stream", state='disabled', command=self.start)
        self.start_btn.grid(row=3, column=0, columnspan=3, pady=6, ipadx=28)
        self.stop_btn = tk.Button(self, text="Stop & remove", state='disabled', command=self.stop)
        self.stop_btn.grid(row=4, column=0, columnspan=3, pady=(0,10), ipadx=20)

        self.status_lbl = tk.Label(self, text="Select a folder and click Start."); self.status_lbl.grid(row=5, column=0, columnspan=3, pady=(0,12))

    def browse(self):
        d = filedialog.askdirectory()
        if d:
            self.music_dir = Path(d)
            self.dir_var.set(d)
            self.start_btn.config(state='normal')

    def start(self):
        if not self.music_dir: return
        self.port = self.port_var.get()
        if self.port in docker_used_ports():
            self.port = find_free_port(self.port+1); self.port_var.set(self.port)
            messagebox.showinfo("Port busy", f"Using {self.port} instead.")

        pw = "hackme-source"; prefix = f"pirate_{self.port}"

        # write configs
        (self.workdir/"icecast.xml").write_text(ICECAST_XML.format(pw=pw, port=self.port, mount=MOUNT), encoding='utf-8')
        (self.workdir/"radio.liq").write_text(LIQUIDSOAP_LIQ.format(port=self.port, pw=pw, mount=MOUNT), encoding='utf-8')
        music_vol = str(self.music_dir).replace("\\", "/")  # docker on Windows wants forward slashes
        (self.workdir/"docker-compose.yml").write_text(COMPOSE_YML.format(prefix=prefix, port=self.port, musicvol=music_vol), encoding='utf-8')

        subprocess.run(["docker","compose","-f",self.workdir/"docker-compose.yml","pull"], check=False)
        if subprocess.run(["docker","compose","-f",self.workdir/"docker-compose.yml","up","-d"]).returncode:
            messagebox.showerror("Docker","Failed to start containers."); return

        self.scan_covers(); self.after(2000, self.poll_cover)
        self.start_btn.config(state='disabled'); self.stop_btn.config(state='normal')
        self.status_lbl.config(text=f"ðŸŽ‰ Listening at http://localhost:{self.port}{MOUNT}")

    def stop(self):
        subprocess.run(["docker","compose","-f",self.workdir/"docker-compose.yml","down"], stdout=subprocess.DEVNULL)
        self.start_btn.config(state='normal'); self.stop_btn.config(state='disabled')
        self.cover_lbl.configure(image=self.blank_img); self.status_lbl.config(text="Stream stopped.")

    # coverâ€‘art helpers
    def scan_covers(self):
        self.covers.clear()
        for mp3 in self.music_dir.glob('*.mp3'):
            try:
                apic: APIC = ID3(mp3).getall('APIC')[0]
                img = Image.open(io.BytesIO(apic.data)).resize((220,220))
                self.covers[mp3.name] = ImageTk.PhotoImage(img)
            except Exception: pass

    def poll_cover(self):
        try:
            meta = requests.get(f"http://localhost:{self.port}/status-json.xsl", timeout=1).json()
            src = meta['icestats']['source']
            if isinstance(src, list):
                src = next((s for s in src if s.get('listenurl','').endswith(MOUNT)), src[0])
            title = Path(src.get('title','')).name
            self.cover_lbl.configure(image=self.covers.get(title, self.blank_img))
        except Exception:
            pass
        self.after(2000, self.poll_cover)

if __name__ == "__main__":
    if subprocess.run(["docker","info"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL).returncode != 0:
        sys.exit("Docker isnâ€™t running.")
    RadioGUI().mainloop()
# start-pirate-radio.bat